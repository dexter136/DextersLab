argo-cd:
  dex:
    enabled: false
  server:
    extraArgs:
      - --insecure
    config:
      url: https://argocd.dex136.xyz
      statusbadge.enabled: 'true'
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
      resource.customizations.health.argoproj.io_ApplicationSet: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in pairs(obj.status.conditions) do
              if condition.type == "ErrorOccurred" and condition.status == "True" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "ResourcesUpToDate" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = ""
        return hs
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/enable: "true"
        hajimari.io/icon: "wrench"
        hajimari.io/appName: "ArgoCD"
      hosts:
        - &host argocd.dex136.xyz
      tls:
        - secretName: argocd-tls-certificate
          hosts:
            - *host
    metrics: &metrics
      enabled: true
      serviceMonitor:
        enabled: true
  controller:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      rules:
        enabled: true
        spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[ArgoCD] No reported applications"
            description: >
              ArgoCD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.
        - alert: ArgoAppNotHealthy
          expr: |
            argocd_app_info{health_status!="Healthy"} == 1
          for: 1h
          labels:
            severity: critical
          annotations:
            summary: "[{{`{{$labels.name}}`}}] Application not healthy"
            description: >
              The application [{{`{{$labels.name}}`}} has not been healthy for over
              1 hour.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 1h
          labels:
             severity: critical
          annotations:
            summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
            description: >
              The application [{{`{{$labels.name}}`}} has not been synchronized for over
              1 hour.
  repoServer:
    metrics: *metrics
  redis:
    metrics: *metrics
  applicationset:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
